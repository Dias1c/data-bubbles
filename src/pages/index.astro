<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Data Bubbles</title>
  </head>
  <body>
    <canvas
      id="canvas"
      style="position: absolute; width: 100vw; height: 100vh; top: 0; left: 0; z-index: 1;"
    >
      ?
    </canvas>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;

    font-family: Inter, Roboto, "Helvetica Neue", "Arial Nova", "Nimbus Sans",
      Arial, sans-serif;
    background-color: #474747;
  }
</style>

<script>
  import {
    DrawableDataBubble,
    getFunctionGetColorByDelta,
  } from "../entities/drawer";
  import { isCoordinatesInCircle } from "../shared/lib/math/isCoordinatesInCircle";

  const scale = 2;

  function main() {
    const canvas = document.getElementById("canvas");
    if (!(canvas instanceof HTMLCanvasElement)) {
      console.error("canvas not found");
      return;
    }
    if (!canvas.getContext) {
      console.error("canvas is not supported");
      return;
    }

    const ctx = canvas.getContext("2d");
    if (!ctx) {
      return;
    }

    let mouseX: number | null = null;
    let mouseY: number | null = null;
    canvas.addEventListener("mousemove", (e) => {
      mouseX = e.x * scale;
      mouseY = e.y * scale;
    });
    canvas.addEventListener("mouseleave", () => {
      mouseX = null;
      mouseY = null;
    });

    const fitCanvasSize = () => {
      canvas.width = window.innerWidth * scale;
      canvas.height = window.innerHeight * scale;
    };

    fitCanvasSize();

    const data = [
      {
        label: "Alice",
        value: 100,
        src: "/favicon.svg",
      },
      {
        label: "Bob",
        value: 200,
        src: "/favicon.svg",
      },
      {
        label: "Carl",
        value: 300,
        src: "/favicon.svg",
      },
    ];

    const dataBubbles = data.map((d) => {
      const img = new Image();
      img.src = d.src;

      const r = d.value;

      const dataBubble = new DrawableDataBubble({
        x: Math.random() * (canvas.width - r * 2) + r,
        y: Math.random() * (canvas.height - r * 2) + r,
        r: r,
        image: img,
        label: d.label,
        value: `${d.value}`,
        fontFamily: "Arial",
        getColor: getFunctionGetColorByDelta({ delta: Math.random() * 2 - 1 }),
      });

      return {
        ...d,
        dataBubble,
      };
    });

    const draw = () => {
      ctx.beginPath();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fill();

      dataBubbles.forEach(({ dataBubble }) => {
        const { x, y, r } = dataBubble;
        let selected =
          !!mouseX &&
          !!mouseY &&
          isCoordinatesInCircle({ x: mouseX, y: mouseY, cR: r, cX: x, cY: y });

        dataBubble.draw({ ctx, selected });
      });
    };

    draw();
    setInterval(draw, 1 / 60);

    window.addEventListener("resize", () => {
      fitCanvasSize();
      draw();
    });
  }

  main();
</script>
