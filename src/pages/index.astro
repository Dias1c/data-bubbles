<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Data Bubbles</title>
  </head>
  <body>
    <canvas
      id="canvas"
      style="position: absolute; width: 100vw; height: 100vh; top: 0; left: 0; z-index: 1;"
    >
      ?
    </canvas>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;

    font-family: Inter, Roboto, "Helvetica Neue", "Arial Nova", "Nimbus Sans",
      Arial, sans-serif;
    background-color: #474747;
  }
</style>

<script>
  import {
    DrawableDataBubble,
    getFunctionGetColorByDelta,
  } from "../entities/drawer";
  import img_favicon from "../../public/favicon.svg";

  const scale = 2;

  function main() {
    const canvas = document.getElementById("canvas");
    if (!(canvas instanceof HTMLCanvasElement)) {
      console.error("canvas not found");
      return;
    }
    if (!canvas.getContext) {
      console.error("canvas is not supported");
      return;
    }

    const fitCanvasSize = () => {
      canvas.width = window.innerWidth * scale;
      canvas.height = window.innerHeight * scale;
    };

    fitCanvasSize();

    const ctx = canvas.getContext("2d");
    if (!ctx) {
      return;
    }

    const img = new Image();
    img.src = img_favicon.src;

    const dataBubble = new DrawableDataBubble({
      x: 500,
      y: 500,
      r: 500,
      image: img,
      label: "Astro",
      value: "+2500",
      fontFamily: "Arial",
      getColor: getFunctionGetColorByDelta({ delta: 1 }),
    });

    const draw = () => {
      ctx.beginPath();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fill();

      const r = Math.random() * 500;

      dataBubble.r = r;
      dataBubble.x = Math.random() * (canvas.width - r * 2) + r;
      dataBubble.y = Math.random() * (canvas.height - r * 2) + r;
      dataBubble.draw({ ctx });

      // window.requestAnimationFrame(draw);
    };

    draw();

    window.addEventListener("resize", () => {
      fitCanvasSize();
      draw();
    });
  }

  main();
</script>
